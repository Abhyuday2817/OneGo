from django.core.management.base import BaseCommandfrom django.utils import timezonefrom datetime import timedelta, timeimport randomfrom apps.categories.models import Categoryfrom apps.users.models import Userfrom apps.mentors.models import MentorProfilefrom apps.appointments.models import Appointmentfrom apps.gigs.models import GigRequestfrom apps.courses.models import Coursefrom apps.mentorship_reviews.models import MentorReviewfrom apps.notifications.models import Notificationclass Command(BaseCommand):    help = 'Seed enhanced demo data: users, mentor profiles, reviews, appointments, gigs, courses, and notifications'    def handle(self, *args, **options):        # Step 1: Create Multiple Users        # Generate Students        for i in range(5):  # Create 5 students            User.objects.get_or_create(                username=f'student{i+1}',                defaults={                    'email': f'student{i+1}@example.com',                    'password': 'pass1234'  # Note: Use hashed passwords in production                }            )        # Generate Mentors        for i in range(5):  # Create 5 mentors            User.objects.get_or_create(                username=f'mentor{i+1}',                defaults={                    'email': f'mentor{i+1}@example.com',                    'password': 'pass1234'  # Note: Use hashed passwords in production                }            )        self.stdout.write(self.style.SUCCESS('Created multiple students and mentors'))        # Step 2: Create Mentor Profiles        mentors = User.objects.filter(username__startswith='mentor')  # Get all mentor users        expertise_list = ['Python, AI', 'Web Development', 'Data Science', 'Cloud Computing', 'Cybersecurity']        certifications_list = ['Google AI Certification', 'AWS Certified Developer', 'Certified Ethical Hacker']        for mentor_user in mentors:            MentorProfile.objects.get_or_create(                user=mentor_user,                defaults={                    'expertise': random.choice(expertise_list),                    'bio': f'Experienced mentor in {random.choice(expertise_list)}',                    'hourly_rate': random.randint(500, 1500),                    'per_minute_rate': random.randint(10, 30),                    'rating': round(random.uniform(3.0, 5.0), 1),                    'num_reviews': random.randint(10, 50),                    'certifications': random.choice(certifications_list),                    'languages': 'English',                    'created_at': timezone.now(),                    'updated_at': timezone.now(),                }            )        self.stdout.write(self.style.SUCCESS('Created mentor profiles'))        # Step 3: Add Multiple Reviews        students = User.objects.filter(username__startswith='student')  # Get all student users        mentors_profiles = MentorProfile.objects.all()  # Get all mentor profiles        reviews_list = [            "Excellent mentoring session!",            "Very knowledgeable and helpful.",            "Good session, but can improve communication.",            "Provided great insights on the topic.",            "Highly recommend this mentor!"        ]        for student in students:            for mentor in mentors_profiles:                MentorReview.objects.get_or_create(                    mentor=mentor,                    student=student,                    defaults={                        'rating': random.randint(3, 5),                        'review': random.choice(reviews_list),                        'created_at': timezone.now(),                    }                )        self.stdout.write(self.style.SUCCESS('Added mentor reviews'))        # Step 4: Add Appointments (Avoid Overlapping)        for student in students:            for mentor in mentors_profiles:                # Generate random future date and time                start_time = timezone.now() + timedelta(days=random.randint(1, 30))                end_time = start_time + timedelta(hours=1)                # Check for existing appointments for the mentor during the slot                existing_appointments = Appointment.objects.filter(                    mentor=mentor,                    start_time__lte=end_time,                    end_time__gte=start_time                )                if not existing_appointments.exists():                    Appointment.objects.create(                        student=student,                        mentor=mentor,                        start_time=start_time,                        end_time=end_time,                        status='confirmed'                    )                    self.stdout.write(self.style.SUCCESS(f'Created appointment for {student.username} with {mentor.user.username}'))        self.stdout.write(self.style.SUCCESS('Added appointments'))        # Step 5: Add Gigs        categories = Category.objects.all()  # Get all categories        for student in students:            GigRequest.objects.get_or_create(                student=student,                title=f"Need help with {random.choice(['Python', 'Web Development', 'AI'])} project",                description="I need guidance to complete my project.",                category=random.choice(categories),                budget_min=random.randint(1000, 2000),                budget_max=random.randint(2000, 5000),                bidding_deadline=timezone.now() + timedelta(days=random.randint(5, 10)),            )        self.stdout.write(self.style.SUCCESS('Added gig requests'))        # Step 6: Add Courses        course_categories = Category.objects.all()  # Get all categories        for mentor in mentors_profiles:            Course.objects.get_or_create(                mentor=mentor,                title=f"Intro to {random.choice(['AI', 'Web Development', 'Python'])}",                description="A beginner-friendly course to learn the basics.",                price=random.randint(500, 1500),                duration_hours=random.randint(5, 20),                category=random.choice(course_categories),                defaults={'delivery_type': Course.DELIVERY_LIVE, 'schedule_info': {}}            )        self.stdout.write(self.style.SUCCESS('Added courses'))        # Step 7: Add Notifications        notifications_list = [            "Your appointment has been confirmed!",            "You received a new review.",            "Your course has been published.",            "Your gig request has received a new bid.",            "You have earned a new badge!"        ]        for user in User.objects.all():            Notification.objects.get_or_create(                user=user,                message=random.choice(notifications_list),                unread=True,                created_at=timezone.now()            )        self.stdout.write(self.style.SUCCESS('Added notifications'))        self.stdout.write(self.style.SUCCESS('Enhanced demo data seeded successfully!'))